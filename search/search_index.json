{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"1-inbox/%40bush132407932Pdf1945/","title":"@bush132407932Pdf1945","text":"<p>[!info] - Cite Key: @bush132407932Pdf1945 - Link: 132407932.pdf</p>"},{"location":"1-inbox/%40bush132407932Pdf1945/#annotations","title":"Annotations","text":"<p>%% begin annotations %%</p> <p>%% end annotations %%</p> <p>%% Import Date: 2023-02-07T13:00:17.209-05:00 %%</p>"},{"location":"Features/LaTeX%20Math%20Support/","title":"LaTeX Math Support","text":"<p>LaTeX math is supported using MathJax.</p> <p>Inline math looks like \\(f(x) = x^2\\). The input for this is <code>$f(x) = x^2$</code>. Use <code>$...$</code>.</p> <p>For a block of math, use <code>$$...$$</code> on separate lines</p> <pre><code>$$\nF(x) = \\int^a_b \\frac{1}{2}x^4\n$$\n</code></pre> <p>gives </p> \\[ F(x) = \\int^a_b \\frac{1}{2}x^4 \\]"},{"location":"Features/Mermaid%20Diagrams/","title":"Mermaid diagrams","text":"<p>Here's the example from MkDocs Material documentation: </p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n</code></pre>"},{"location":"Features/Text%20Formatting/","title":"Text Formatting","text":"<p>You can have lists like this</p> <ul> <li>first</li> <li>second</li> <li>third</li> </ul> <p>Or checklist lists to</p> <ul> <li> Get</li> <li> things</li> <li> done</li> </ul> <p>Also, get highlights and strikethroughs as above (similar to Obsidian).</p> <p>More formatting options for your webpage here. (but not compatible with Obsidian)</p>"},{"location":"Topic%201/Note%201/","title":"Note 1","text":"<p>Example: link to Mermaid Diagrams under <code>Features</code></p>"},{"location":"Topic%201/Note%202/","title":"Note 2","text":""},{"location":"_ancillary_code_do_not_touch/hypothesis/","title":"Hypothesis","text":"<p>&lt;% / </p>"},{"location":"_ancillary_code_do_not_touch/hypothesis/#hypothesidian-a-templater-script-for-retrieving-annotations-from-hypothesis","title":"Hypothes.idian  a templater script for retrieving annotations from Hypothes.is","text":"<p>Dev: RoamHacker https://twitter.com/roamhacker</p>"},{"location":"_ancillary_code_do_not_touch/hypothesis/#prerequisites","title":"Prerequisites:","text":"<ul> <li>Templater plugin by https://github.com/SilentVoid13/Templater</li> <li>Free Hypothes.is developer token from: https://hypothes.is/account/developer</li> <li>This script will prompt you for his token and save it to a file called \"hypothesis config.md\"</li> <li>This file store your configuration and can be located any where in your vault. </li> <li>Since it contains your unique user token, you should not share this file with others.</li> </ul>"},{"location":"_ancillary_code_do_not_touch/hypothesis/#features","title":"Features:","text":"<ul> <li>Retrieve your annotations for a web article/web PDF'</li> <li>Retrieve your annotations from a date</li> <li>Open a URL in hypothes.is for annotation</li> <li>Retrieve ALL user annotations for a web article/web PDF</li> </ul>"},{"location":"_ancillary_code_do_not_touch/hypothesis/#output","title":"Output:","text":"<ul> <li>If an empty document, descriptive front matter is output to beginning of the document, followed by annotations</li> <li>If document already contains text, the annotations are inserted at the current location</li> </ul>"},{"location":"_ancillary_code_do_not_touch/hypothesis/#update-log","title":"Update Log:","text":"<ul> <li>2021-05-04 fix that they config file can be located anywhere</li> <li>2021-04-26 First alpha version released to testers */</li> </ul> <p>const configFileName = 'hypothesis config.md'; let userToken = ''; let userid    = ''; const apiUrl = 'https://api.hypothes.is/api/';</p> <p>const apiHTTPGet = async (apiCall, data) =&gt; {   return await fetch(apiCall, {      \"method\": \"GET\", cache: 'no-cache',     \"headers\": { \"Authorization\": \"Bearer \" + userToken }    }).then(async(data)=&gt; await data.json() ) }  </p> <p>const getAllAnnotations = async (articleUrl)=&gt; {     const searchUrl = <code>search?limit=200&amp;order=asc&amp;uri=${encodeURIComponent(articleUrl)}</code>;     const results = await apiHTTPGet(<code>${apiUrl}${searchUrl}</code>);   return await apiAnnotationSimplify(results); }</p> <p>const getMyAnnotations = async (articleUrl)=&gt; {     const searchUrl = <code>search?limit=200&amp;user=${userid}&amp;order=asc&amp;uri=${encodeURIComponent(articleUrl)}</code>;     const results = await apiHTTPGet(<code>${apiUrl}${searchUrl}</code>);   return await apiAnnotationSimplify(results); }</p> <p>const getAnnotationsSinceDate = async (fromDate)=&gt; {   const searchUrl = <code>search?limit=200&amp;user=${userid}&amp;sort=updated&amp;order=asc&amp;search_after=${encodeURIComponent(fromDate)}</code>;   const results = await apiHTTPGet(<code>${apiUrl}${searchUrl}</code>);    return await apiAnnotationSimplify(results); }</p> <p>const apiAnnotationSimplify = async (results)=&gt;{   return results.rows.map(e=&gt;{      var r = {        title: e.document.title[0], uri:e.uri, context: e.links.incontext,       text: e.text, highlight: '', tags: e.tags,        user: e.user, group:e.group,  created: e.created, updated: e.updated,     };     try {        if(e.target[0].selector) {         var txt = e.target[0].selector.filter(e=&gt;e.type=='TextQuoteSelector');         if(txt) r.highlight = txt[0].exact;        }     } catch(e){};     return r;   }); }</p> <p>const openArticleInHypothesis = async (articleUrl)=&gt; {   window.open('https://via.hypothes.is/' + articleUrl, '_blank'); }</p> <p>const getUserProfile = async ()=&gt; await apiHTTPGet(<code>${apiUrl}profile</code>);</p> <p>const configFile = await app.vault.getFiles().find(f =&gt; f.name == 'hypothesis config.md');</p> <p>//Setup configuration file if (configFile == undefined ) {   userToken = await tp.system.prompt(\"Hypothes.is user token from https://hypothes.is/account/developer\");   console.log(userToken)   if (userToken==null || userToken.length==0) return;   const userProfile = await getUserProfile();   userid = userProfile.userid;   if( userToken.length&gt;0 &amp;&amp; userid != null ){       const fileOutput = <code>---\\nhypothesisUserToken: ${userToken} \\n</code> +      <code>hypothesisUserID: ${userid} \\n</code> +       <code>---\\n\\nThis file can be place anywhere in your vault.\\n\\n</code> +       <code>get your token here: https://hypothes.is/account/developer</code>       await app.vault.create(configFileName,fileOutput);   } } else {   //load user  token   if (app.metadataCache.metadataCache[ app.metadataCache.fileCache[configFile.path].hash ]?.frontmatter?.hypothesisUserToken) {     userToken = app.metadataCache.metadataCache[ app.metadataCache.fileCache[configFile.path].hash ].frontmatter.hypothesisUserToken;     userid    = app.metadataCache.metadataCache[ app.metadataCache.fileCache[configFile.path].hash ].frontmatter.hypothesisUserID;   } }</p> <p>if(userToken.length == 0 || userid == null) {   new Notice(<code>No user token or is invalid. Try deleting ${configFileName} and restarting the script.</code>)   return ''; }</p> <p>const selectedText = tp.file.selection(); let articleAnnotations = null; let articleURL = null; let insertUser = false; //find out the type of action const hypothesisAction = await tp.system.suggester(   [ 'Retrieve my annotations for a web article/web PDF',     'Retrieve my annotations from a date',     'Open URL in Hypothes.is for annotation (select a URL or type url)',     'Retrieve ALL annotations for a web article/web PDF',   ],   ['myarticle', 'mydate', 'openURL', 'allAnnotations'])</p> <p>switch (hypothesisAction) {   case 'myarticle':     articleURL = await tp.system.prompt('URL:', selectedText);     if(articleURL==null ||  articleURL.length==0) return '';     articleAnnotations = await getMyAnnotations(articleURL);     break;   case 'allAnnotations':     articleURL = await tp.system.prompt('URL:', selectedText);     if(articleURL==null ||  articleURL.length==0) return '';     articleAnnotations = await getAllAnnotations(articleURL);     insertUser = true;     break;   case 'openURL':     const articleURLtoOpen = await tp.system.prompt('URL to open in Hypothes.is:', selectedText );     await openArticleInHypothesis(articleURLtoOpen);     return;     break;   case 'mydate':     const articleDates = await tp.system.prompt('Retrieve article titles  from date:', tp.date.now('YYYY-MM-DD', -7) );     if(articleDates==null || articleDates.length==0) return '';     articleAnnotations = await getAnnotationsSinceDate(articleDates);     if (articleAnnotations.length==0) {       new Notice('no results for this date range');       return;     }     const articlesNames = [...new Set( articleAnnotations.map(e=&gt;e.title + ' \\n(' + e.uri + ')' ))];     const articlesURIs  = [...new Set( articleAnnotations.map(e=&gt;e.uri))];     articleURL = await tp.system.suggester(articlesNames, articlesURIs)     if(articleURL==null || articleURL.length==0) return '';     articleAnnotations = await getMyAnnotations(articleURL);     break; }</p> <p>if (articleAnnotations==null || articleAnnotations.length == 0) return '';</p> <p>/ TEMPLATE STARTS HERE /  if (tp.file.content.length==0) {   //likely a new document, insert front matter   tR += <code>---\\n</code>;   tR += <code>fileType: HypothesisAnnotations\\n</code>;   tR += <code>creationDate: ${tp.date.now('YYYY-MM-DD')} \\n</code>;   tR += <code>annotationDate: ${articleAnnotations[0].created.substring(0,10)}\\n</code>;   tR += <code>uri: ${articleAnnotations[0].uri}\\n</code>;   tR += <code>---\\n</code>; }</p> <p>tR += <code># ${articleAnnotations[0].title}\\n</code> tR += <code>URL: ${articleAnnotations[0].uri}\\n\\n</code></p> <p>for( a of articleAnnotations) {   let tags = '';   let user = '';   if(a.tags.length&gt;0) tags = ' ' + (a.tags.map(t=&gt; '[['+ t + ']]')).join(' ');   if(insertUser) user = ' (' + a.user.replace('acct:','').replace('@hypothes.is','') + ')';   if(a.text) tR += <code>${a.text}\\n&amp;mdash;[[${user}]]\\n\\n</code>;   tR += <code>## Source \\n</code>;   tR += <code>&gt; ${a.highlight}[^1]\\n\\n</code>;   tR += <code>[^1]: [${articleAnnotations[0].title}](${articleAnnotations[0].uri}) | [syndication link](tk) \\n</code>;   tR += <code>\\n---\\ntags: \\nlinks: ${tags} \\n- broader terms (BT):  \\n- narrower terms (NT):  \\n- related terms (RT):  \\n- used for (UF) or aliases:  \\nconnected ideas:  \\nMOC:  \\n\\n---\\n</code>; } %&gt;</p>"},{"location":"_ancillary_code_do_not_touch/zot-import/","title":"Zot import","text":"<p>cssclass: zotero-note alias: [{% if shortTitle %}\"{{shortTitle | safe}}\"{% else %}\"{{title | safe}}\"{% endif %}]</p> <p>{%- macro colorValueToName(color) -%}     {%- switch color -%}         {%- case \"#a28ae5\" -%}             Relevant / important         {%- case \"#ff6666\" -%}             Disagree         {%- case \"#ffd400\" -%}             Questions / confusion         {%- case \"#5fb236\" -%}             Agree         {%- case \"#2ea8e5\" -%}             Definitions / concepts         {%- default -%}             Interesting but not relevant     {%- endswitch -%} {%- endmacro -%}</p> <p>{%- macro calloutHeader(type) -%}     {%- switch type -%}         {%- case \"highlight\" -%}             Highlight         {%- case \"strike\" -%}             Strikethrough         {%- case \"underline\" -%}             Underline         {%- case \"image\" -%}             Image         {%- default -%}             Note     {%- endswitch -%} {%- endmacro %}</p> <p>[!info] - Cite Key: [[@{{citekey}}]] {%- for attachment in attachments | filterby(\"path\", \"endswith\", \".pdf\") %} - Link: {{attachment.title}}}}) {%- endfor -%} {%- if abstractNote %} - Abstract: {{abstractNote}} {%- endif -%} {%- if bibliography %} - Bibliography: {{bibliography}} {%- endif %} {%- if hashTags %} - Tags: {{hashTags}} {%- endif %}</p>"},{"location":"_ancillary_code_do_not_touch/zot-import/#annotations","title":"Annotations","text":"<p>{% persist \"annotations\" %} {% set annots = annotations | filterby(\"date\", \"dateafter\", lastImportDate) -%} {% if annots.length &gt; 0 %}</p>"},{"location":"_ancillary_code_do_not_touch/zot-import/#imported-on-importdate-formatyyyy-mm-dd-hmm-a","title":"Imported on {{importDate | format(\"YYYY-MM-DD h:mm a\")}}","text":"<p>{% for color, annots in annots | groupby(\"color\") -%}</p>"},{"location":"_ancillary_code_do_not_touch/zot-import/#colorvaluetonamecolor","title":"{{colorValueToName(color)}}","text":"<p>{% for annot in annots -%}</p> <p>[!quote{% if annot.color %}|{{annot.color}}{% endif %}] {{calloutHeader(annot.type)}} {%- if annot.annotatedText %} {{annot.annotatedText | nl2br}} {%- endif -%} {%- if annot.imageRelativePath %} ![[{{annot.imageRelativePath}}]] {%- endif %} {%- if annot.ocrText %} {{annot.ocrText}} {%- endif %} {%- if annot.comment %}</p> <p>{{annot.comment | nl2br}} {%- endif %}</p> <p>Page {{annot.page}} [[{{annot.date | format(\"YYYY-MM-DD#h:mm a\")}}]]</p> <p>{% endfor -%} {% endfor -%} {% endif %} {% endpersist %}</p>"},{"location":"_note_templates/atomic_note_template/","title":"Atomic note template","text":"<p>Title: PUT THE TITLE OF NOTE HERE date: {{date}} type: literature project:</p> <p>tags::  projects::</p> <ul> <li>One idea per note - but as complete as possible in your own words</li> <li>Write as if you are writing for someone else. Use full sentences</li> <li>Include sources in the note, but the note should be understood even if you don't know the context it was taken from. The note should stand by itself</li> <li>Be precise, clear and brief.}</li> </ul>"},{"location":"_note_templates/atomic_note_template/#citational-information","title":"Citational Information","text":"<p>Link to the originating literature note.</p>"},{"location":"_note_templates/atomic_note_template/#related-links","title":"Related Links","text":"<p>{Use this section to think about connections. Think about how the newly created notes connect with your existing knowledge. If you find some connections, connect the new notes with the older notes already in your system.To find these, ask:</p> <ul> <li>How does this idea fit into what I already know?</li> <li>What does this idea mean for some other idea that I already have?</li> <li>Does this add to, contradict, or explain another idea that I already have?</li> </ul> <p>You link to other notes by putting them in square brackets. Remember that Obsidian will auto search as you type for notes with those words. Once you've selected a note, you can add the ^ symbol to link to a subheading or block within a note, too.}</p>"},{"location":"_note_templates/idea_note_template/","title":"Idea note template","text":"<p>Title: PUT THE TITLE OF NOTE HERE date: {{date}} type: permanent project:</p> <p>tags:: projects::</p> <p>tags are concepts you're interested in that you think this note might speak to projects are notes that describe an overall project that this idea might be appropriate for</p> <ul> <li>a note containing your own thoughts, inspiration, reflection</li> <li>can be as simple as a link to a literature note, and asking, 'why?'</li> <li>One idea per note - but as complete as possible in your own words</li> <li>Write as if you are writing for someone else. Use full sentences</li> <li>Include sources in the note, but the note should be understood even if you don't know the context it was taken from. The note should stand by itself</li> <li> <p>Be precise, clear and brief.</p> </li> <li> <p>Link to relevant source-notes</p> </li> </ul>"},{"location":"_note_templates/source_note_template/","title":"Source note template","text":"<p>Title: [use @full-cite-key] date: {{date}} type: reference project:</p> <p>tags:: projects:</p>"},{"location":"_note_templates/source_note_template/#reference","title":"Reference","text":"<p>Use the zotero integration: full reference command to add the bibliographic metadata. In the metadata block above, use the cite key (start typing @ and the surname you're after to get that correct) . Change the title of the note to the cite key, including the @ sign.</p>"},{"location":"_note_templates/source_note_template/#summary-key-take-aways","title":"Summary &amp; Key Take Aways","text":"<p>*Here type up a 1-2 paragraph concise summary of the article. </p> <p>*If there are any key image you want to refer, you can include them here, drop them into the media folder, and then use the  format (just the filename).</p>"},{"location":"_note_templates/source_note_template/#links","title":"Links","text":"<p>Put any links to separate notes you have teased out here.</p>"},{"location":"website/Will%20Chartrand%27s%20Personal%20Memex/","title":"Will Chartrand's Personal Memex","text":""},{"location":"website/Will%20Chartrand%27s%20Personal%20Memex/#map-of-content","title":"Map of Content\u00b6","text":""},{"location":"website/Will%20Chartrand%27s%20Personal%20Memex/#sources","title":"Sources\u00b6","text":"<ul> <li>@bushvannevarWeMayThink1945</li> </ul>"},{"location":"website/Will%20Chartrand%27s%20Personal%20Memex/#thoughts","title":"Thoughts\u00b6","text":""},{"location":"website/Will%20Chartrand%27s%20Personal%20Memex/#technology","title":"'Technology'\u00b6","text":"<ul> <li>what impact does this kind of gendered writing have on imagined futures</li> <li>who is the audience</li> <li>Do instagram photos re bonetrade demonstrate gendered background spaces</li> </ul>"},{"location":"website/Will%20Chartrand%27s%20Personal%20Memex/#ethics","title":"'Ethics'\u00b6","text":"<ul> <li>machine vision ethics</li> </ul>"},{"location":"website/Will%20Chartrand%27s%20Personal%20Memex/#process-of-doing-research","title":"'Process of Doing Research'\u00b6","text":"<ul> <li>growing mountain of research</li> <li>more research fewer insights</li> </ul>"},{"location":"website/Will%20Chartrand%27s%20Personal%20Memex/#todo","title":"ToDo\u00b6","text":"<p>(I tagged certain notes with #todo then did a search for that tag; I copied the results as markdown links and pasted below.)</p> <ul> <li>@grahamFleshingOutBones2018</li> <li>@hamilakisArchaeologyAssemblage2017</li> <li>extracted notes from @rubergLivestreamingBedroomPerforming2021-zotero</li> <li>extracted public annotations from @bushvannevarWeMayThink1945</li> <li>more research fewer insights</li> </ul> <p>Thing I found out - if I put a ? in a note name (and probably any other special character) github actions breaks the link to the note.</p>"},{"location":"website/Sources/%40bushvannevarWeMayThink1945/","title":"@bushvannevarWeMayThink1945","text":"<p>Title: As We May Think date: 2023-02-07 type: literature project:</p> <p>tags::  projects::</p> <ul> <li>One idea per note - but as complete as possible in your own words</li> <li>Write as if you are writing for someone else. Use full sentences</li> <li>Include sources in the note, but the note should be understood even if you don't know the context it was taken from. The note should stand by itself</li> <li>Be precise, clear and brief.}</li> </ul>"},{"location":"website/Sources/%40bushvannevarWeMayThink1945/#citational-information","title":"Citational Information","text":"<p>Link to the originating literature note.</p>"},{"location":"website/Sources/%40bushvannevarWeMayThink1945/#related-links","title":"Related Links","text":"<p>{Use this section to think about connections. Think about how the newly created notes connect with your existing knowledge. If you find some connections, connect the new notes with the older notes already in your system.To find these, ask:</p> <ul> <li>How does this idea fit into what I already know?</li> <li>What does this idea mean for some other idea that I already have?</li> <li>Does this add to, contradict, or explain another idea that I already have?</li> </ul> <p>You link to other notes by putting them in square brackets. Remember that Obsidian will auto search as you type for notes with those words. Once you've selected a note, you can add the ^ symbol to link to a subheading or block within a note, too.}</p>"}]}